
1. bean 
 - 스프링이 직접 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트
 - 스프링 컨테이너가 생성과 관계설정, 사용등을 제어해주는 제어의 역전이 적용된 오브젝트
 
 2. 빈팩토리
 - 스프링에서 빈의 생성과 관계 설정 같은 제어를 담당하는 IoC 오브젝트
 - 이를 조금 더 확자한 애플리케이션 컨텍스트(application context)를 주로 사용.
 
 3. application context 
  - 싱글톤을 저장하고 관리하는 싱글톤 레지스트리이기도 함.
  - 스프링은 기본적으로 별다른 설정을 하지 않으면 내부에서 생성하는 빈 오브젝트를
    모두 싱글톤으로 생성함.
    
 3-1. 싱글톤 레지스트리
   - 자바의 기본적인 싱글톤 패턴의 구현방식은 여러가지 단점이 있으므로, 직접 싱글톤 형태의
   오브젝트를 만들고,  관리한다. 
  
4. servlet
 - 대부분 멀티 쓰레드 환경에서 싱글톤으로 동작
 - 스프링은 IoC 컨테이너 뿐만 아니라, 고전적인 싱글톤 패턴을 대신해서 싱글톤을 만들고 관려해준다.  
 
5. 스프링 빈의 스코프
 - 스프링 빈의 기본 스코프는 싱글톤이다.
 - 싱글톤 스코프는 컨테이너 내에 한개의 오브젝트만 만들어져서, 강제로 제거하지 않는 한 스프링 컨테이너가 존재하는 동안 계속 유지된다.
 
 6. 메소드를 이용한 DI 주입방법
  6-1. 수정자 메소드를 이용한 주입 ( setter ) 
  6-2. 일반 메소드를 이용한 주입 
  
  
 7. Template / Callback 의 사용법
  7-1. 용어 정리 
  - 템플릿: 어떤 목적을 위해 미리 만들어둔 모양이나 틀을 가리킨다. JSP는 HTML이라는 고정된 부분에 EL과 스크립릿이라는 변하는 부분을 넣은 일종의 템플릿 파일이다.
  - 콜백: 실행되는 것을 목적으로 다른 오브젝트의 메소드에 전달되는 오브젝트를 말한다. 자바에선 메소드 자체를 파라미터로 전달할 방법이 없기 때문에 메소드가 담긴 오브젝트를 전달한다. 이것을 functional object라 한다.
 
  - 고정된 작업 흐름을 갖고 있으면서 여기저기서 자주 반복되는 코드가 있다면, 중복되는 코드를 분리한다. (전략패턴)
  - 전략패턴에서는 바뀌지 않는 부분을 컨텍스트(context)로 바뀌는 부분을 전략으로 만들고 인터페이스를 통해 변경할 수 있도록 구성한다.
  - 최초에는 간단히 메소드로 분리
  - 그중 일부 작업을 필요에 따라 바꾸어 사용해야 한다면 인터페이스를 사이에 두고 분리해서 전략패턴을 적용하고 DI로 의존관계를 관리하도록 만든다.
  - 만약 바뀌는 부분이 한 애플리케이션 안에서 동시에 여러 종류가 만들어 질 수 있다면, Template / Call 패턴 적용을 고려한다
  - 전향적인 예 ( try/catch/finally 구문 ) 
  - 예제소스 ( CalcSumTest.java ) 
  - 