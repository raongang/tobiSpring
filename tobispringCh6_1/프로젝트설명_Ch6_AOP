
프로젝트 범위

  Ch6-1
   - 스프링에서 제공하는 ProxyFactoryBean에 대해 다룸

Proxy

proxy의 목적에 따른 구분
 1. 클라이언트가 타켓에 접근하는 방법을 제어
 2. 타켓에 부가적인 기능을 부여
 
디자인패턴 관점의 proxy 
  데코레이터 패턴 : 타켓에 부가적인 기능을 부여하면서 프록시로 동작.

AOP용어

 1 AOP ( 관점 지향 프로그래밍 ) 
   - ASPECT : 그 자체로는 application의 핵심기능을 담고 있지는 않지만, application을 구성하는 중요한 한 가지 요소이며, 핵심기능에 부가되어 의미를 가지는 특별한 모듈.
               즉, applicatoin을 구성하는 한가지 측면(aspect)
   - ASPECT의 구성 : 부가될 기능을 구성한 ADVICE + ADVICE를 어디에 적용할지 결정하는 POINT CUT   

    1-1. AOP programming
      - application의 핵심적인 기능에서 부가적인 기능을 분리해서 aspect라는 독특한 모듈로 만들어서 설계하고 개발하는 방법.

 2. Advice 
  - MethodInterceptor처럼 target object에 종속되지 않는 순수한 부가기능을 담은 오브젝트(UppercaseAdvice)를 스프링에서 어드바이스라고 함.
 
 3.Point Cut 
  - 부가기능 적용 대상 메소드 선정 방법.
 
 4. Point Cut interface 구조
 
    public interface Pointcut{
    	ClassFilter getClassFilter(); //프록시를 적용할 클래스인지 확인해준다.
    	MehtodMatcher getMethodMatcher(); //어드바이스를 적용할 메소드인지 확인한다.
    }
            
 5. Advisor 
  - point cut(메소드선정 알고리즘) + Adivce(부가기능) 


빈 후처리기를 이용한 자동프록시 생성

1. dynamic proxy, TransactionHandler 를 스프링 di 할 방법이 없어서 ProxyFactoryBean 을 생성해서 이용한다.
  -> ProxyFactoryBean 설정 부분이 중복된다.
  -> 빈 후처리기를 이용
  
2. 빈 후처리기 
  2-1.  BeanPostProcessor Interface를 구현해서 만드는 빈 후처리기.
      ㄴ 스프링빈 오브젝트 생성이후 이를 다시 가공할수 있게 해줌.
      ㄴ 종류 : DefaultAdvisorAutoProxyCreator 
  2-2. DefaultAdvisorAutoProxyCreator
      - 등록방법 : 빈 후처리기 자체를 Bean으로 등록

3. 포인트컷 표현식
  3-1. AspectJ포인트컷 표현식 : AspectJExpressionPointcut 클래스 사용
  

AspectJ 
 - 가장 강력한 AOP프레임워크이지만 프록시를 이용하지 않는다.
 - spirng처럼 dynmaic proxy 방식을 이용하지 않느다.
 - porxy처럼 간접적인 방법이 아니라, target object를 뜯어고쳐서 부가기능을 직접 넣어주는 직접적인 방법을 이용.
 - compile된 target class 파일 자체를 수정하거나 클래스가 jvm에 로딩되는 시점을 가로채서 바이트코드를 조작함.
 
   
   
   
       
 
  
