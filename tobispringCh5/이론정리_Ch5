
Chapter05 서비스 추상화.

1. Transaction
  - 더 이상 나눌 수 없는 단위 작업.
  - DB는 하나의 SQL명령을 처리하는 경우에는 그 자체로 완벽한 트랜잭션을 지원
  - 여러개의 SQL이 사용되는 작업의 경우 하나의 트랜잭션으로 취급해야 하는 경우가 생김
    ( ex. 계좌이체, 여러사용자에 대한 레벨 수정 ) 
    
1-1. Transaction rollback
  - 첫번째 SQL 성공, 두번째 성공전 장애 발생시 첫번째 SQL도 작업을 취소해야 함.
  
1-2. Transaction Commit
  - 여러개의 SQL을 하나의 트랜잭션으로 처리하는 경우에는 모든 SQL이 성공적으로 
    마무리 됐따고 DB에 알려주어서 작업을 확정시키는 것.
   
1-3 Transaction의 경계설정
   - setAutoCommit(false)로 트랜잭션의 시작을 선언하고 commit 또는 rollBack으로 트랜잭션을 종료하는 작업
   - JDBC에서는 Connection을 가져와서 설정을 한다
   - JDBC에서는 기본설정은 DB작업을 수행한 직후 자동으로 commit하므로 여러개의 SQL을 모아서 트랜잭션을 경계를 설정하기 위해서는
     자동 commit 옵션인 setAutoCommit을 false로 설정한다.
     
     
1-4. Transaction 동기화 기법 
    1-4-1.로컬 트랜잭션 
    
     - 트랜잭션 이용을 위해 Transaction Synchronizations 기법을 이용
     - 트랜잭션 동기화 저장소는 작업 스레드마다 독립적으로 Connection 오브젝트를 저장하고 관리하기 때문에,
        다중 사용자를 처리하는 서버의 멀티스레드 환경에서도 충돌나지 않음.
     - 트랜잭션 동기화 기법을 이용시 파라미터를 통해 일일이 Connection 오브젝트를 전달 할 필요가 없다.
     - 단점은 여러개의 db를 이용 불가
     
    1-4-2. 글로벌 트랜잭션
      - 여러 개의 DB가 참여하는 트랜잭션 가능
      - 자바에서 jdbc외의 jta(Java transaction API)를 제공한다.
      
      
1-5. spring의 transaction service 추상화
      - db의 종류는 글로벌 트랜잭션으로 커버가 가능하나, 트랜잭션이 db마다 각각 다를 경우 다시 종속되는 문제가 발생하므로 
        SQL을 이용한 중복되는 부분을 추상화 시킨다.
      - PlatformTransactionManager로 시작하는 트랜잭션은 트랜잭션 동기화 저장소에 저장됨.
      
1-6. transaciton serveice 추상화의 DI
      - 어떤 클래스든 스프링 빈으로 등록할 경우에는 먼저 싱글톤으로 만들어져서 여러 쓰레드에서 동시에 사용해도 되는지 검토해야함.
      - 스프링이 제공하는 모든 PlatformTransactionManager의 구현 클래스는 싱글톤으로 사용가능.
     