<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
		
		
	<!-- DataSource 설정 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"></property>
		<property name="username" value="tobi" />
		<property name="password" value="spring" />
	</bean>
	
	<!-- global transaction 추상화 
		interface PlatformTransactionManager
		  ㄴ abstract AbstractPlatformTransactionManager
     		 ㄴ class DataSourceTransactionManager
	 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- aop namespace를 이용한 선언
	    아래 나누어진 부분이 aop namespace를 이용하여 편하게 정리됨.
	    aop:config -> aop 설정을 담는 부모 태크. 필요에 따라 AspectJAdvisorAutoProxyCreate를 빈으로 등록해준다.
	-->
	<aop:config>
		<aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)" />
	</aop:config>
	
	<!-- tx스키마를 이용해서 transactionInterceptor와 transactionAttributes속성을 정의. (명시적 트랜잭션)
		 tx:advice 태그에 의해 TransactionInterceptor 빈이 등록됨.
		 transaction-manager의 bean 아이디가 transactionManager라면 생략가능.
		 propagation="REQUIRED" : default값이 스키마에 정의되어 있으므로 생략가능.
	-->		
	<tx:advice id="transactionAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*" />
		</tx:attributes> 
	</tx:advice>

	<!-- 메소드이름 패턴을 이용한 트랜잭션 속성(transactionAttributes) 정의 예  
		TransactionAdvice.java의 기능을 확장한 예로 TransactionAdvice.java파일은 더 이상 사용하지 않음.
		 메소드별로 다른 트랜잭션 정의를 적용할려면 advice의 기능을 확장해야 함.
		 ISOLATION_SERIALIZABLE : 최고수준의 격리
		 만약 메소드이름이 하나 이상의 패턴과 일치할 경우 가장 정확히 일치하는 것이 적용된다.
	
	<bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	-->
		
	<!--  application components -->
	<bean id="userDao" class="springbook.user.dao.UserDaoImpl">
		<property name="jdbcTemplate" ref="dataSource" />
	</bean>

	<bean id="userService" class="springbook.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
	</bean>
     
    <!-- 자동프록시 테스트 빈 등록 
		스태틱멤버클래스는 $로 지정한다.
		parent : 프로퍼티 정의를 포함해서 userService빈의 설정을 상속받는다.    	
    -->
    <bean id="testUserService" class="springbook.user.test.UserServiceTest$TestUserService" parent="userService" />
     		
</beans>